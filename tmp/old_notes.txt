# === // FINALIZE // ==============================================
# Finalization

To finalize the script:
1. Understand its use cases and logic.
2. Walk through a completed use of the script in a theoretical scenario, command by command.
3. Present a coinciding function/task list in a Markdown table as you go through each step.
4. At the end, ensure the script's goal is entirely achieved by answering the question: "What would be the next steps after completing the script's actions?" If the answer is "nothing else," the task is complete.

### Review Questions
1. What is your review of the code?
2. Do you have suggested optimizations or superior refactoring that better achieves the code's goals?
3. Does the code provide robust coverage for all expected issues? Have any common issues been overlooked?
4. Have you streamlined configurable options to avoid overwhelming the user while maintaining a balance of robust functionality and simplicity?
5. Have you integrated autonomic retrieval of all non-standard dependencies?

# === // OPTIMIZE // ==========================================
# Script Evaluation and Optimization Prompt

**Objective**: Perform a thorough analysis of a provided script to ensure effectiveness, identify improvements, apply coding best practices, and assess compliance with industry standards. Deliver a constructive evaluation for guiding further development.

#### Step 1: Understand the Script’s Purpose
**Prompt**:
- Analyze the script and identify its primary purpose.
- Determine its effectiveness in achieving the intended purpose.
- Identify areas where it falls short or excels in addressing its target goals.

---

#### Step 2: Alternative Approach
**Prompt**:
- Rewrite the script with the same goals in mind.
- Identify changes to improve performance, scalability, and maintainability.

---

#### Step 3: Rate the Script
**Prompt**:
- Rate the script on modularity, scalability, performance optimization, error handling, and user experience.
- Use a 1-10 scale, with 10 being production-ready. Provide reasoning for the rating.

---

#### Step 4: Summarize the Evaluation
**Prompt**:
- Summarize whether the script meets its intended purpose.
- Highlight areas for improvement.
- Compare the script to industry standards in maintainability, performance, and usability.

---

#### Step 5: Recommendations
**Prompt**:
- Recommend the next steps based on the evaluation. Suggest refinements, modularization, or optimizations if necessary.

---

# === // ERRORS // =========================================
# Error Resolution

### Universal Error Handling and Requirements
- **Error Definition**: Code with "#Placeholder" is invalid. Replace placeholders with functional implementations.
- **Final Version Requirements**:
  - Ensure the script is fully functional and error-free.
  - Avoid simplified examples—ensure full functionality.
  - Include all logic, variable names, and error handling without omissions.

# === // TOC // ========================================
# Table of Contents (TOC)

### Task Organization
1. **Task TOC:**
   Organize and categorize all information with Markdown styling for clarity and visual appeal. Present an informative and visually engaging table of contents summarizing action items. Provide a title for the conversation, limited to 22 characters, for archiving.

2. **Task Summary:**
   Summarize all information in a well-organized, visually appealing layout. Present a clear table of contents and assign a suitable identifying title for the conversation.

3. **Task TOC & Summary:**
   Combine the TOC and summary into an informative Markdown layout detailing all action items.

# === // QUICK PROMPTS // ========================================================
# Refactor Result

- Maintain technical and concise communication.
- Ensure all suggestions are integrated cohesively within the script.
- Validate all required arguments and prevent syntax errors.

**Important Notes**:
- Scripts must be cohesive and avoid placeholders or incomplete logic.
- Address and refactor syntax errors caused by human oversight.

---

# Milestone
1. Proceed to milestones requiring testing.
2. Write the revised script to stdout for review or save it for testing.
3. Ensure the script integrates seamlessly with dynamic testing scenarios.

---

# Menu System
- Implement a robust menu system with clear options for each function.
- Provide visual feedback for operations, balancing minimalism and elegance.
- Enhance clarity with a text-based interface using Markdown-style layout and styling.

---

# Insight
- Review the script to understand its purpose.
- Analyze findings and integrate them into improved functionality.

---

# Versatility
- Include a wide range of options for versatility.
- Focus on adaptability to cater to common and specialized needs.

---

# Discrepancies
- Identify discrepancies between original and refactored scripts.
- List functionalities present in the original script but missing in the refactored version.
- Integrate missing functionalities while maintaining logic and performance.

---

# Improve Code

- **Enhance Error Handling**
  - Add robust error-handling mechanisms to address unexpected inputs and prevent crashes.
  - Validate user input before processing and provide clear error messages when input is invalid.

- **Implement Confirmation Prompts**
  - Include confirmation prompts for critical operations to prevent accidental execution of irreversible actions.

- **Encapsulate Functionalities**
  - Modularize code by grouping related functionalities into reusable modules for better maintainability and scalability.

- **Design a User-Friendly Menu System**
  - Develop a menu interface with clear options for all available features.
  - Provide real-time feedback on the execution status of selected options.

- **Add Help Section**
  - Implement a `-h` flag to display usage instructions for all available commands.
  - Display help by default when an unrecognized command is entered.

- **Ensure Idempotency**
  - Validate that operations do not cause unintended side effects when repeated or if the desired state is already achieved.

---

# Step-by-Step Instructions

1. **Break Down Tasks into Clear Steps**
   - Explain each process with detailed, step-by-step instructions.
   - Include examples to illustrate the steps wherever applicable.

2. **Use Comments for Clarity**
   - Annotate examples with comments to make them easier to understand.

3. **Address Advanced Use Cases**
   - Provide examples for specialized scenarios beyond basic functionality.

4. **Ensure Cohesiveness**
   - Integrate all instructions seamlessly within the overall script logic.

---

# Quick API Script

- **Objective**:
  Write the API list and task descriptions for all functionalities in the document using a Markdown table. This serves as a guided workflow for creating an automated, modular, menu-driven script.
  **Version**: 1.0
  **File Storage**: Save the first iteration in the sandbox for further refinements.

- **Tasks**:
  - Identify functionalities missing in version 1.0 and document them in a new API list.
  - Add a column for task IDs and statuses (`completed` or `pending`).
  - Systematically implement pending tasks and update the API list for tracking.

---

# Implement Suggestions

- **Integration**
  - Meticulously integrate all suggestions and recommendations.
  - Cohesively revise the script to align with changes dynamically and intelligently.

- **Adjustments**
  - Ensure all code and functions are retroactively adjusted to accommodate for changes.
  - Replace all placeholders with functional code. Any placeholder (`#Placeholder`) in the script is considered invalid and unacceptable.

- **Finalization**
  - Provide a final version of the script that includes no placeholders or incomplete logic.
  - Ensure the script is production-ready with no further recommendations required.

- **Validation**
  - Thoroughly test the final script to confirm completeness and functionality.
