import os
import shutil
import json
import threading
import time

def process_and_compress(directory_path, target_dir='/mnt/data/result', archive_format='zip'):
    """
    Compresses a directory containing processed files into a zip archive for easy download.

    Parameters:
    - directory_path: Path to the directory containing files to compress.
    - target_dir: Target directory to store the compressed archive.
    - archive_format: Format of the archive ('zip' by default).

    Returns:
    - Path to the compressed archive file.
    """
    try:
        if not os.path.exists(directory_path):
            print(f"Directory {directory_path} does not exist.")
            return None

        os.makedirs(target_dir, exist_ok=True)
        shutil.make_archive(target_dir, archive_format, directory_path)
        zip_path = f'{target_dir}.{archive_format}'
        print(f"Archive created at {zip_path}")
        return zip_path
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

def save_data_persistently(data, file_path='/mnt/data/persistent_data.json', interval=600):
    """
    Saves data to a JSON file periodically and immediately upon change.

    Parameters:
    - data: Data to save (usually a dictionary).
    - file_path: Path to the JSON file where data will be saved.
    - interval: Time interval (in seconds) between periodic saves.
    """
    def save_data():
        try:
            with open(file_path, 'w') as file:
                json.dump(data, file, indent=4)
                print(f"Data saved to {file_path}")
        except Exception as e:
            print(f"Failed to save data: {e}")

    def periodic_save():
        while True:
            save_data()
            time.sleep(interval)

    # Save immediately to ensure data persistence
    save_data()

    # Start the periodic save in a background thread
    threading.Thread(target=periodic_save, daemon=True).start()

# Example usage of the functions
if __name__ == "__main__":
    final_img_path = '/path/to/image.jpg'  # Update this path as necessary
    directory_path = os.path.dirname(final_img_path)  # Assuming images are in a common directory

    # Process and compress images
    zip_path = process_and_compress(directory_path)
    if zip_path:
        print(f"Compressed file available at: {zip_path}")

    # Save some data persistently
    analysis_results = {"example_key": "example_value"}  # Example data structure
    save_data_persistently(analysis_results, '/mnt/data/analysis_results.json')
